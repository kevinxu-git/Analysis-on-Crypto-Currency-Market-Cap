knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(SoDA)
install.packages("SoDA")
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(SoDA)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
rm(list=ls())
# Data import
data <- read.csv("data.csv")
setwd("~/Documents/Ecole_IngÃ©/2A/Yonsei/Courses/Data Mining/Project/DataMiningProject")
# Data import
data <- read.csv("data.csv")
View(data)
]
p <- dim(data)[2
]
p <- dim(data)[2
# 3. Explore, clean, and pre-process data :
n <- dim(data)[1]
p <- dim(data)[2]
# 3. Explore, clean, and pre-process data :
n <- dim(data)[1]
p <- dim(data)[2]
plot(data)
plot(data)
# 3. Explore, clean, and pre-process data :
n <- dim(data)[1]
p <- dim(data)[2]
plot(data)
plot(data)
head(housing.df)
head(data)
t(t(names(data)))
class(data$REMODEL)
class(data[, 1])
class(data$REMODEL)
class(data$Market.Cap...)
head(data)
t(t(names(data)))
## Missing values ?
summary(data)
## Missing values ?
summary(data)
# Data Partition
train.index <- sample(rownames(data), n*0.5)
# Data Partition
train.index <- sample(1:n, n*0.5)
valid.index <- sample(setdiff(rownames(data), train.index), n*0.3)
test.index <- setdiff(rownames(data), union(train.index, valid.index))
train.data <- data[train.index, ]
valid.data <- data[valid.index, ]
test.data <- data[test.index, ]
rownames(data)
# Data Partition
train.index <- sample(1:n, n*0.5)
valid.index <- sample(setdiff(1:n, train.index), n*0.3)
test.index <- setdiff(1:n, union(train.index, valid.index))
train.data <- data[train.index, ]
valid.data <- data[valid.index, ]
setdiff(1:n, train.index)
length(setdiff(1:n, train.index))
## Missing values ?
summary(data)
data <- na.omit(data)
## Missing values ?
summary(data)
data <- na.omit(data)
## Data visualisation
data.ts <- data[, c(2, 8)]
ridership.ts <- ts(data.ts$Market.Cap..., freq = 12)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)", ylim = c(1300, 2300))
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 10), end = c(2019, 4) freq = 12)
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 10), end = c(2019, 4), freq = 12)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 1), freq = 12)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
4
4
2019
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 4), freq = 12)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 1), freq = 365)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 365), freq = 365)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 500), freq = 365)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 200), freq = 365)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 200), freq = 365)
plot(ridership.ts, xlab = "year", ylab = "Ridership (in 000s)")
## Data visualisation
### Time series
data.ts <- data[, c(2, 8)]
### Time series
data.ts <- data[, c(2, 8)]
library(forecast)
plot(ridership.ts, xlab = "year", ylab = "Market.Cap(in $)")
ridership.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 200), freq = 365)
plot(ridership.ts, xlab = "year", ylab = "Market.Cap (in $)")
# 6. Data Partition
train.index <- sample(1:n, n*0.5)
plot(data$Market.Cap...)
plot(ridership.ts, xlab = "year", ylab = "Market.Cap (in $)")
# 6. Data Partition
train.index <- sample(1:n, n*0.5)
### Aggregation : Monthly Average
market.month <- window(market.ts, start = c(2015, 1), end = c(2019, 200))
### Time series
data.ts <- data[, c(2, 8)]
library(forecast)
market.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 200), freq = 365)
plot(market.ts, xlab = "year", ylab = "Market.Cap (in $)")
### Aggregation : Monthly Average
market.month <- window(market.ts, start = c(2015, 1), end = c(2019, 200))
plot(market.month, xlab = "Year", ylab = "Market.Cap")
monthly.ridership.ts <- tapply(market.ts, cycle(market.ts), mean)
### Aggregation : Monthly Average
market.month <- window(market.ts, start = c(2015, 1), end = c(2019, 200))
plot(market.month, xlab = "Year", ylab = "Market.Cap")
monthly.ridership.ts <- tapply(market.ts, cycle(market.ts), mean)
annual.ridership.ts <- aggregate(market.ts, FUN = mean)
plot(market.ts, xlab = "Year", ylab = "Average Ridership", ylim = c(1300, 2300))
plot(market.ts, xlab = "Year", ylab = "Average Ridership")
### Time series
data.ts <- data[, c(2, 8)]
library(forecast)
market.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 200), freq = 365)
plot(market.ts, xlab = "year", ylab = "Market.Cap (in $)")
### Aggregation : Monthly Average
market.month <- window(market.ts, start = c(2015, 1), end = c(2019, 200))
plot(market.month, xlab = "Year", ylab = "Market.Cap")
monthly.ridership.ts <- tapply(market.ts, cycle(market.ts), mean)
annual.ridership.ts <- aggregate(market.ts, FUN = mean)
plot(market.ts, xlab = "Year", ylab = "Average Ridership")
cycle(market.ts)
market.ts
#
round(cor(data.ts), 2)
#
round(cor(data), 2)
# 4. Data dimension reduction
pcs <- prcomp(data)
# 4. Data dimension reduction
pcs <- prcomp(data[, -2])
summary(pcs)
# 4. Data dimension reduction
pcs <- prcomp(data[, -2], scale. = TRUE)
summary(pcs)
summary(pcs)
plot(pcs)
library(factoextra)
fviz_eig(pcs)
fviz_pca_ind(pcs,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_var(pcs,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
fviz_pca_biplot(pcs, repel = TRUE,
col.var = "#2E9FDF", # Variables color
col.ind = "#696969"  # Individuals color
)
c
cDZd
azd
ad
zada
daz
rm(list=ls())
# Data import
data <- read.csv("data.csv")
# 3. Explore, clean, and pre-process data :
n <- dim(data)[1]
p <- dim(data)[2]
rm(list=ls())
rm(list=ls())
# Data import
data <- read.csv("data.csv")
# 3. Explore, clean, and pre-process data :
n <- dim(data)[1]
p <- dim(data)[2]
head(data)
t(t(names(data)))
plot(data)
## Missing values ?
summary(data)
data <- na.omit(data)
### Time series
data.ts <- data[, c(2, 8)]
library(forecast)
market.ts <- ts(data.ts$Market.Cap..., start = c(2015, 1), end = c(2019, 200), freq = 365)
plot(market.ts, xlab = "year", ylab = "Market.Cap (in $)")
# 4. Data dimension reduction
## PCA
pcs <- prcomp(data[, -2], scale. = TRUE)
summary(pcs)
plot(pcs)
library(factoextra)
fviz_eig(pcs)
fviz_pca_ind(pcs,
col.ind = "cos2", # Color by the quality of representation
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
# 4. Data dimension reduction
## PCA
pcs <- prcomp(data[, -2], scale. = TRUE)
summary(pcs)
plot(pcs)
library(factoextra)
fviz_eig(pcs)
fviz_pca_var(pcs,
col.var = "contrib", # Color by contributions to the PC
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE     # Avoid text overlapping
)
# 4. Data dimension reduction
## PCA
pcs <- prcomp(data[, -2], scale. = TRUE)
summary(pcs)
plot(pcs)
